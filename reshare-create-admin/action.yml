iname: Create admin user
description: Creates an admin user from templates

inputs:
  okapi-host:
    description: The okapi host url
    required: true
  okapi-token:
    description: The okapi supertenant token
    required: true
  tenant-id:
    description: The id of the tenant to create an admin on
    required: true
  admin-password:
    description: The password of the account to be created
    required: true
  user-template:
    description: User template file
    required: false
    default: ./templates/admin_user.json.j2
  perms-template:
    description: User permissions template file
    required: false
    default: ./templates/admin_perms.json.j2
  creds-template:
    description: User credentials template file
    required: false
    default: ./templates/admin_creds.json.j2
  authtoken-version:
    description: version of mod-authtoken
    required: false
    default: mod-authtoken-2.15.2

runs:
  using: "composite"
  steps:
    - name: Ensure dependencies are installed
      shell: bash
      run: |
        if ! command -v http &> /dev/null; then
          echo "Installing httpie..."
          pip install httpie
        else
          echo "httpie already installed"
        fi

        if ! command -v jq &> /dev/null; then
          echo "Installing jq..."
          sudo apt-get update && sudo apt-get install -y jq
        else
          echo "jq already installed"
        fi

    - name: set admin uuid
      shell: bash
      id: gen_admin_uuid
      run: echo "uuid=$(uuidgen)" >> $GITHUB_OUTPUT

    - name: template user
      uses: cuchi/jinja2-action@v1.3.0
      with:
        template: "${{ inputs.user-template }}"
        output_file: admin_user.json
        variables: |
          tenantid="${{ inputs.tenant-id }}"
          admin_uuid="${{ steps.gen_admin_uuid.outputs.uuid }}"

    - name: template perms
      uses: cuchi/jinja2-action@v1.3.0
      with:
        template: "${{ inputs.perms-template }}"
        output_file: admin_perms.json
        variables: |
          admin_uuid="${{ steps.gen_admin_uuid.outputs.uuid }}"

    - name: template creds
      uses: cuchi/jinja2-action@v1.3.0
      with:
        template: "${{ inputs.creds-template }}"
        output_file: admin_creds.json
        variables: |
          tenantid="${{ inputs.tenant-id }}"
          admin_password="${{ inputs.admin-password }}"

    - name: Disable mod-authtoken
      id: disable_authtoken
      shell: bash
      run: |
        OKAPI_URL="${{ inputs.okapi-host }}"
        OKAPI_TOKEN="${{ inputs.okapi-token }}"
        TENANT="${{ inputs.tenant-id }}"
        MODULE_ID="${{ inputs.authtoken-version }}"
    
        echo "Disabling mod-authtoken for tenant '$TENANT'..."
    
        set +e
        RESPONSE=$(echo "[{\"id\":\"$MODULE_ID\",\"action\":\"disable\"}]" | \
          http --check-status POST "$OKAPI_URL/_/proxy/tenants/$TENANT/install?depCheck=false" \
          "x-okapi-tenant:supertenant" \
          "x-okapi-token:$OKAPI_TOKEN")
        STATUS=$?
        set -e
    
        echo "Response:"
        echo "$RESPONSE"
    
        if [[ $STATUS -ne 0 ]]; then
          echo "Request failed with status $STATUS"
          exit $STATUS
        fi
    
    - name: Create user
      shell: bash
      run: |
        OKAPI_URL="${{ inputs.okapi-host }}"
        TENANT="${{ inputs.tenant-id }}"
        
        cat admin_user.json | \
          http --check-status POST "$OKAPI_URL/users" \
          "x-okapi-tenant:$TENANT"

    - name: Create permissions
      shell: bash
      run: |
        OKAPI_URL="${{ inputs.okapi-host }}"
        TENANT="${{ inputs.tenant-id }}"
        
        cat admin_perms.json | \
          http --check-status POST "$OKAPI_URL/perms/users" \
          "x-okapi-tenant:$TENANT"

    - name: Create credentials
      shell: bash
      run: |
        OKAPI_URL="${{ inputs.okapi-host }}"
        TENANT="${{ inputs.tenant-id }}"
        
        cat admin_creds.json | \
          http --check-status POST "$OKAPI_URL/authn/credentials" \
          "x-okapi-tenant:$TENANT"
    
    - name: Enable mod-authtoken
      shell: bash
      run: |
        MODULE_ID="${{ inputs.authtoken-version }}"
        OKAPI_URL="${{ inputs.okapi-host }}"
        OKAPI_TOKEN="${{ inputs.okapi-token }}"
        TENANT="${{ inputs.tenant-id }}"
        
        echo "[{\"id\":\"$MODULE_ID\",\"action\":\"enable\"}]" | \
          http --check-status POST "$OKAPI_URL/_/proxy/tenants/$TENANT/install" \
          "x-okapi-tenant:supertenant" \
          "x-okapi-token:$OKAPI_TOKEN"
